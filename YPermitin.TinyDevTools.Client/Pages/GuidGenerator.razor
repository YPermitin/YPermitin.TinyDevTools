@page "/guidGenerator"
@using System.Text
@using System.Timers
@using OfficeOpenXml
@using YPermitin.TinyDevTools.Client.Extensions.JSRuntime
@using YPermitin.TinyDevTools.Client.Helpers
@using YPermitin.TinyDevTools.Client.Services
@inject ClipboardService ClipboardService
@inject IJSRuntime JS

<PageTitle>Генератор GUID</PageTitle>


<h1 class="display-4 fw-bold text-center">Генератор GUID</h1>

<div class="container">
    <main>
        <div class="row">
            <div class="col-md-3">
                <button class="btn btn-primary col-12" @onclick="GenerateGuid">Сформировать</button>
            </div>
            <div class="col-md-3">
                <div class="input-group">
                    <span class="input-group-text">Кол-во (1-@MaxGuidToGenerate)</span>
                    <input type="number" 
                           class="form-control" 
                           id="guidsCount" 
                           placeholder="Количество"
                           min="1"
                           max="@MaxGuidToGenerate"
                           @bind="GuidsCount">
                </div>
            </div>
            <div class="col-md-3">
                <button class="@_copyToClipboardButtonClass" @onclick="CopyToClipboard">@_copyToClipboardButtonName</button>
            </div>
            <div class="col-md-3">
                <button class="@_exportToExcelButtonClass" @onclick="SaveToExcel">@_exportToExcelButtonName</button>
            </div>
        </div>
        <div class="lines"></div>
        <div class="row">
            <div class="col-4">
                <div class="form-check form-switch">
                    <input class="form-check-input" type="checkbox" id="formatAddHyphens" @bind="_formatAddHyphens">
                    <label class="form-check-label" for="formatAddHyphens">Дефисы</label>
                </div>
            </div>
            <div class="col-4">
                <div class="form-check form-switch">
                    <input class="form-check-input" type="checkbox" id="formatUppercase" @bind="_formatToUpperCase">
                    <label class="form-check-label" for="formatUppercase">Верхний регистр</label>
                </div>
            </div>
            <div class="col-4">
                <div class="form-check form-switch">
                    <input class="form-check-input" type="checkbox" id="formatAddBraces" @bind="_formatAddBraces">
                    <label class="form-check-label" for="formatAddBraces">Фигурные скобки</label>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-4">
                <div class="form-check form-switch">
                    <input class="form-check-input" type="checkbox" id="encodingBase64" @bind="_encodingBase64">
                    <label class="form-check-label" for="encodingBase64">Base64</label>
                </div>
            </div>
        </div>
        <div class="lines"></div>
        <div class="row">
            <div class="col-12">
                <div class="input-group">
                    <div class="input-group">
                        <textarea class="form-control" rows="@TextAreaRowsSize" readonly="readonly">@_generatedGuidsPresentation</textarea>
                    </div>
                </div>
            </div>
        </div>
        <div class="lines"></div>
        
        <div class="row row-cols-1 row-cols-md-3 mb-3">
            <div class="col">
                <div class="card mb-4 rounded-3 shadow-sm">
                    <div class="card-header py-3">
                        <h4 class="my-0 fw-normal text-center">Что такое GUID?</h4>
                    </div>
                    <div class="card-body">
                        <p>GUID (он же UUID) - это аббревиатура от 'Globally Unique Identifier' (или 'Universally Unique
                            Identifier'). Это 128-битное целое число, используемое для идентификации ресурсов. Термин GUID
                            обычно используется разработчиками, работающими с технологиями Microsoft, в то время как UUID
                            используется везде.</p>
                    </div>
                </div>
            </div>
            <div class="col">
                <div class="card mb-4 rounded-3 shadow-sm">
                    <div class="card-header py-3">
                        <h4 class="my-0 fw-normal text-center">Насколько уникален GUID?</h4>
                    </div>
                    <div class="card-body">
                        <p>128-битный код достаточно велик, а алгоритм генерации достаточно уникален, чтобы, если бы в течение 1
                            года генерировалось 1 000 000 000 идентификаторов GUID в секунду, вероятность дублирования
                            составляла бы всего 50%. Или если бы каждый человек на Земле сгенерировал 600 000 000
                            идентификаторов GUID, вероятность дублирования составляла бы всего 50%.</p>
                    </div>
                </div>
            </div>
            <div class="col">
                <div class="card mb-4 rounded-3 shadow-sm">
                    <div class="card-header py-3">
                        <h4 class="my-0 fw-normal text-center">Как используются GUID'ы?</h4>
                    </div>
                    <div class="card-body">
                        <p>GUID'ы используются при разработке корпоративного программного обеспечения на C#, Java и C++ в
                            качестве ключей базы данных, идентификаторов компонентов или практически везде, где требуется
                            действительно уникальный идентификатор. Идентификаторы GUID также используются для идентификации
                            всех интерфейсов и объектов в COM-программировании.</p>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="lines"></div>
        
        <div class="row">
            <div class="col">
                <div class="card rounded-3 shadow-sm">
                    <div class="card-header py-3">
                        <h4 class="my-0 fw-normal text-center">Дополнительная информация</h4>
                    </div>
                    <div class="card-body">
                        <ul class="list-group">
                            <li class="list-group-item"><a href="https://ru.wikipedia.org/wiki/UUID" target="_blank">GUID (UUID) - информация на Wikipedia</a></li>
                            <li class="list-group-item"><a href="https://docs.microsoft.com/ru-ru/dotnet/api/system.guid?view=net-6.0" target="_blank">Структура GUID'а</a></li>
                            <li class="list-group-item"><a href="https://www.ietf.org/rfc/rfc4122.txt" target="_blank">RFC 4122</a></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>

        <div class="lines"></div>
    </main>
</div>

@code {
    private const int MaxGuidToGenerate = 10000;
    private int _guidsCount = 1;
    private int GuidsCount
    {
        get => Math.Min(_guidsCount, MaxGuidToGenerate);
        set => _guidsCount = Math.Min(value, MaxGuidToGenerate);
    }

    private bool _formatAddHyphens = true;
    private bool _formatToUpperCase;
    private bool _formatAddBraces;
    private bool _encodingBase64;

    private string? _generatedGuidsPresentation = string.Empty;
    private int _generatedGuidsCount;
    private int TextAreaRowsSize => Math.Min(Math.Max(1, _generatedGuidsCount), 10);

    private string _copyToClipboardButtonName = "Скопировать в буфер";
    private string _copyToClipboardButtonClass = "btn btn-primary col-12";
    private Timer? _copyToClipboardTimer;

    private string _exportToExcelButtonName = "Экспорт в Excel";
    private string _exportToExcelButtonClass = "btn btn-primary col-12";
    private Timer? _exportToExcelTimer;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        _copyToClipboardTimer = new Timer(1500);
        _copyToClipboardTimer.Elapsed += OnRestoreCopyToClipboardButton;

        _exportToExcelTimer = new Timer(1500);
        _exportToExcelTimer.Elapsed += OnRestoreExportToExcelButton;

        GenerateGuid();
    }

    private async Task CopyToClipboard()
    {
        if (_generatedGuidsPresentation != null)
        {
            await ClipboardService.WriteTextAsync(_generatedGuidsPresentation);

            _copyToClipboardButtonName = "Скопировано в буфер";
            _copyToClipboardButtonClass = "btn btn-success col-12";

            _copyToClipboardTimer?.Stop();
            _copyToClipboardTimer?.Start();
        }
    }

    private void OnRestoreCopyToClipboardButton(Object? source, ElapsedEventArgs e)
    {
        _copyToClipboardButtonName = "Скопировать в буфер";
        _copyToClipboardButtonClass = "btn btn-primary col-12";

        _copyToClipboardTimer?.Stop();

        StateHasChanged();
    }

    private async Task SaveToExcel()
    {
        _exportToExcelButtonName = "Экспортировано в Excel";
        _exportToExcelButtonClass = "btn btn-success col-12";

        ExcelPackage.LicenseContext = LicenseContext.NonCommercial;
        using (ExcelPackage excelPackage = new ExcelPackage())
        {
            var ws = excelPackage.Workbook.Worksheets.Add("GUIDs");
            ws.Column(1).Width = 36;
            ws.Cells["A1"].Value = "GUID";
            ws.Cells["A1"].Style.Font.Bold = true;

            string[] guidLines = _generatedGuidsPresentation.Split(
                new[] { Environment.NewLine },
                StringSplitOptions.None
                );

            int rowNumber = 1;
            foreach (var guidLine in guidLines)
            {
                rowNumber += 1;
                ws.Cells[$"A{rowNumber}"].Value = guidLine;
            }

            await JS.SaveAs("GUIDS.xlsx", await excelPackage.GetAsByteArrayAsync());
        }

        _exportToExcelTimer?.Stop();
        _exportToExcelTimer?.Start();
    }

    private void OnRestoreExportToExcelButton(Object? source, ElapsedEventArgs e)
    {
        _exportToExcelButtonName = "Экспорт в Excel";
        _exportToExcelButtonClass = "btn btn-primary col-12";

        _exportToExcelTimer?.Stop();

        StateHasChanged();
    }
    
    private void GenerateGuid()
    {
        StringBuilder generatedGuidsPresentationBuilder = new StringBuilder();

        _generatedGuidsCount = 0;
        for (int i = 0; i < _guidsCount; i++)
        {
            Guid generatedGuid = Guid.NewGuid();
            string formattedGuid = GetGuidAsString(generatedGuid);
            generatedGuidsPresentationBuilder.AppendLine(formattedGuid);
            _generatedGuidsCount += 1;
        }
        _generatedGuidsPresentation = generatedGuidsPresentationBuilder.ToString();
    }

    private string GetGuidAsString(Guid guidValue)
    {
        string formattedGuid = guidValue.ToString();
            
        if (_formatToUpperCase)
            formattedGuid = formattedGuid.ToUpper();
        if (_formatAddBraces)
            formattedGuid = "{" + formattedGuid + "}";
        if (!_formatAddHyphens)
            formattedGuid = formattedGuid.Replace("-", string.Empty);

        if (_encodingBase64)
            formattedGuid = StringHelper.Base64Encode(formattedGuid);

        return formattedGuid;
    }
}
